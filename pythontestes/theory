Aula 07 - Operadores Aritméticos
Ordem de precedência
        1º: ()
        2º: **
        3º: *, /, //, %
        4º: +, -

    Obs: // é a divisão inteira
         % é o resto ou módulo da divisão
    pow() é uma função de potência, exemplo pow(4, 3)

    É possível definir a quantida de caracteres que irão aparecer no espaço {} no uso do .format()
    ':20' significa que terá 20 caracteres
    '<' O sinal de menor indica que estará alinhado à esquerda
    '>' O sinal de maior indica que estará alinhado à direita
    '^' O acento circunfleco indica que ficará centralizado
    '=^20' é um exemplo que colocará vinte '=' até completar os 20 caracteres
    ':.3f' o argumento diz que aparecerá apenas três casas após a vírgula

    o commando end='' serve para não quebrar a linha no final da função print()

Aula 08 - Utilizando Módulos

    Sintaxe import:
    import biblioteca
    from biblioteca import método, método

    Bibliotecas padrão
        math
            ceil - arredonda número pra cima
            floor - arredonda número pra baixo
            trunc -  vai truncar o número, eliminar tudo depois da vírgula
            pow - potencia
            sqrt - raiz quadrada
            factorial - fatorial

    Caso importe a biblioteca toda tem-se que usar a sintaxe
        biblioteca.método
    Caso importe apenas o método que vai ser usado a sintaxe usada é apenas o módulo
        método()

Aula 09 - Manipulando Texto

Manipulando Cadeias de Texto

    Uma frase é uma cadeia de caracteres e para o python toda cadeia de caracteres está em aspas duplas ou simples.
    Algumas linguagens de programação, inclusive o python, alocam cada caracteres em um subespaço de cada espaço da memória.

    Fatiamento: é conseguir pegar pedaços da cadeia de caracteres (string)
    Obs: no range o último nunca entra
    Ex. Fatiamento frase [primeiro: ultimo: salto]

    Análise: é saber algumas informações como tamanho, forma etc.
    Comandos:
        len(frase): mostra o comprimento da string
        frase.count('o'): Conta quantos vezes aparece a  letra 'o'.
        frase.count('o', 0, 13): Conta a quantidade de letras 'o', comum fatiamento
        frase.find('deo'): Indica a posição no subespaço da memória em que começa a sequência 'deo'
        Operador in,
            Exemplo: 'Curso' in frase
                Esse operador reorna um valor booleano (Verdadeiro ou Falso)

    Transformação: Uma cadeia de caracteres é imutável e eu só consigo modificar-la, através de métodos.
        frase.replace('Python', 'Android'): Procura pela palavra Python e substitui por Android
        fraase.upper(): Transformar todas as letras em maiúsculas
        frase.lower(): é o contrário de upper
        frase.capitalize(): Vai pegar todos os carecteres e transformar em minúsculas, com exceção da primeira letra da string
        frase.title(): Vai analisar todas as palavras e fazer o capitalize em todas as palavras
        frase.strip(): remove todos os espaços no início e final da string, passando o primeiro caractere para a posição 0.
        frase.rstrip(): remove apenas os espaços à direita.
        frase.lstrip(): remove os espaços à esquerda

    Divisão
        frase.split(): Por padrão o split é feito nos espaços, basicamente separa as palavras por espaço e alocar em memórias diferentes, ou seja nova listas.

    Junção
        '-'.join(frase): junta todos os elemntos de frase e vai usar um separador '-'.



Adendo: Usar 3 aspas pra abrir e fechar.

Adendo2:  não é possível fazer o replace de uma única letra específica, para isso é necessário usar um método de concatenação com a parte restante da string. Exemplo:

frase = ('Curso em Vídeo de Python')
new_frase = frase[:2] + 'm' + frase[3:]
print(new_frase)

saída: Cumso em Vídeo de Python


Aula 10 - Condições (Parte 01)

    Estrutura IF
        if comando():
            bloco True
        else:
            bloco False

    Condição simplificada
        Exemplo:
            print('carro novo' if tempo<=3 else 'carro velho')


Aula 11 - Cores no terminal

    * Padrão ANSI
        Sempre que quiser representar uma cor em python, começar com: \033[(estilo;texto;fundo)m
        Adendo: os parênteses não fazem parte do código
        Exemplo: \033[0;33;44m

    Códigos:
        Estilo: Existem outros, mas esses são os que funcionam melhor para o terminal
            0 - none
            1 - bold
            4 - underline
            7 - negative (inverter as configurações de cor do texto e fundo)

        Texto: Todas as opçoes começam com 3
            30 - branco
            31 - vermelho
            32 - verde
            33 - amarelo
            34 - azul
            35 - lilás
            36 - azul bebê
            37 - cinza

        Fundo: São as mesmas cores do texto, porém começam com 4.


Aula 12 - Condições Aninhadas

    if comando():
        bloco 01
    elif comando():
        bloco 02
    elif comando():
        bloco 03
    else:
        ultimo bloco

    A estrutura do else é opcional.

Aula 13 - Estrutura de repetição FOR

    Importante salientar que na estrutura do laço for o range sempre exclui a posição do ultimo argumento da função.

    sintaxe:
        for c in range(1, 10):
            comando

        Para fazer a contagem regressiva é só utilizar o comando:
        for c in range(6, 0, -1)

        Obs: o comando -1 é o argumento para contar regressivamente, nesse caso ele sempre vai tirar 1.

Aula 14 - Estrutura de repetição while

    sintaxe:
        while not apple:
            passo
        pega

Aula 15 – Interrompendo repetições while

    sintaxe:
        while True:
            condição
                comando
            condição
                comando
                break -> serve para para a execução de um laço de repetição


-> VARIÁVEIS COMPOSTAS

Aula 16 – Tuplas

    Em python exitem 3 tipos de variáveis compostas:
        * Tuplas
        * Listas
        * Dicionários

    [-1] Índices negativos mostram os eleentos do final para o início, ou seja, -1 vai mostrar o último item da variável composta
    [-2] Analogamente, -2 mostrará o penúltimo item, assim por diante

    Alguns métodos já usados em exercícios, como len(), podem ser usados
    Estruturas de repetição também são comunente usadas

    Exemplo:
    lanche = ('hamburguer', 'suco', 'pizza', 'pudim')
    for c in lanche:
        print(c)

    ********* AS TUPLAS SÃO IMUTÁVEIS *********

Aula 17 – Listas (Parte 1)

      Listas são mutáveis

      Métodos e funções para listas:
        * lista.append() - serve para adicionar novos itens na o final da lista
        * lista.insert(posição, item) - Serve para adicionar um item em um espaço específico
        * del lista[3] - deleta o item na posição 3 (NÃO É UM MÉTODO)
        * lista.pop() - por padrão esse método apaga o último item da lista, porém pode definir uma posição específica para excluir
        * lista.remove() - porém o método remove(), você não indica o índice, mas o item que deseja eliminar e reposiciona os índices
            - Caso seja setado um número par remover e exista mais do mesmo, ele remove apenas o prieiro.
        * lista.sort() - Ordena todos os valores em ordem crescente
        * lista.sorte(reverse=True) - Ordena em ordem decrescente
            ########### Existe a função sorted(), que basicamente faz a mesma coisa
        * len(lista) - a função len retorna o tamanho da lista


      É possível fazer uma lista com range, acredito eu tenha feito similar no exercício 74, porém foi utilizado o método randint em uma tupla.
        valores = [list(range(4, 11))]

Aula 18 – Listas (Parte 2)

    Conceito de listas dentro de listas

    O append funciona de forma diferente, pois estará criando uma cópia da lista original, por exemplo:
        dados = list()
        dados.append('Pedro')
        dados.append(25)
    Criou-se uma lista chamada de dados, além disso adicionou-se dois itens.

    Para criar o append dessa lista em outra, fazemos:
        pessoas = list()
        pessoas.append(dados[:]) -> aqui está gerando um fatiamento completo de dados, gerando uma cópia dessa lista
    Nesse caso, existirá a lista chamada de "dados" com o nome e a idade nas posições 0 e 1, respectivamente. E a lista pessoas, que na posição 0, constará a lista dados.
    Pode-se criar uma lista, contendo várias listas dentro de cada posição de uma lista principal.

    Uma forma de criar listas dentro de uma lista é:
        pessoas = [['Pedro', 25], ['Maria', 19], ['João', 32]]
    Uma forma de se acessar os itens dentro de listas compostas é trabalhar com os índices, exemplo:
        print(pessoas[0][0]) -> Vai acessar a lista que está na posição 0, sendo que dentro dessa lista, o item que será recuperado também está na posição 0, logo o terminal vai imprimir 'Pedro'.






